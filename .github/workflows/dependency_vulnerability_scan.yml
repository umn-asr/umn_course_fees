name: Dependency Vulnerability Scan

on:
  schedule:
    - cron: '15 7 * * *'
  workflow_dispatch:

jobs:
  dependency-scan:
    runs-on: arc-runner-enterprise

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"

      - name: Install bundler-audit
        run: gem install bundler-audit

      - name: Update bundler-audit database
        run: |
          bundler-audit update > bundler_audit_update.log 2>&1

      - name: Run bundler-audit
        id: bundler_audit
        shell: bash {0}
        run: |
          bundler-audit check --format json > audit_output.json 2> bundler_audit_error.log || true

      - name: Parse audit results
        id: parse_audit
        shell: bash {0}
        run: |
          if [ ! -s audit_output.json ]; then
            echo "No vulnerabilities found or audit_output.json is empty."
            echo "found=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if ! jq '.' audit_output.json > /dev/null 2>&1; then
            echo "Invalid JSON in audit_output.json"
            cat audit_output.json
            echo "found=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          CRITICAL_VULNERABILITIES=$(jq '[.results[] | select(((.advisory.criticality // "") | ascii_downcase) == "critical")]' audit_output.json)
          if [ "$(echo "$CRITICAL_VULNERABILITIES" | jq 'length')" -gt 0 ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
            VULNERABILITIES_DETAILS=$(echo "$CRITICAL_VULNERABILITIES" | jq -r '.[] | "- *Gem:* \(.gem.name)\n  *Version:* \(.gem.version)\n  *Advisory ID:* \(.advisory.id)\n  *Title:* \(.advisory.title)\n  *URL:* \(.advisory.url)\n"')
            MESSAGE=$(printf ':warning: *Critical vulnerabilities found in repository <%s|%s>:*\n\n%s' \
              "https://github.com/${GITHUB_REPOSITORY}" "${GITHUB_REPOSITORY}" \
              "$VULNERABILITIES_DETAILS")
            PAYLOAD=$(jq -n --arg text "$MESSAGE" '{text: $text}')
            echo "slack_payload<<EOF" >> "$GITHUB_OUTPUT"
            echo "$PAYLOAD" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          else
            echo "No critical vulnerabilities found."
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Send Slack notification
        if: ${{ steps.parse_audit.outputs.found == 'true' }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: ${{ steps.parse_audit.outputs.slack_payload }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_VULNERABILITIES }}
